#!/bin/bash
#
# Script to install the different submodule to /usr/local
# Basically prompt the user for each if he wants to install or not
# And use the install procedure found in the README of that submodule
# Does the installation in parallel, starting a child process for each
# Finally, once installation is done, it creates a git tag "installed" for that submodule
# So we can keep track of which commit is installed or not.
#
# NOTES: some points of improvement
# 	* Structure the data more.
# 	  Currently there a multiple associative arrays ("declare -A" in bash, understand map/struct/object) and normal arrays scattered around
# 	  It could be better to have a global array of submodule and each are a struct with the same defined fields
# 	  They could contain the dependency list, the installation step/cmds, the 'echo' commands for logging, etc...
# 	  It would make the program easier to evolve, as to add a new submodule,
# 	  I would only need to create the struct and add it to the array.
# 	  Also I could more easily improve the program to take a different install directory for each program.

function clean
{
    local submodule="$1"
    test -r Makefile && make clean
    git clean -dfX
    echo "$submodule: directory cleaned" >&3
}

function install
{
    local submodule=$1
    echo "starting $submodule installation..."
    set -e
    case $submodule in
        git)
            make -j 4 prefix="$install_dir" NO_TCLTK=YesPlease all man
            echo "$submodule: make finished [1/2]" >&3
            echo "$passwd" | sudo -S make -j 4 prefix="$install_dir" NO_TCLTK=YesPlease install install-doc
            echo "$submodule: sudo make install finished [2/2]" >&3
            ;;
        tmux)
            sh autogen.sh
            echo "$submodule: autogen finished [1/4]" >&3
            ./configure --prefix="$install_dir"
            echo "$submodule: configure done [2/4]" >&3
            make -j 4
            echo "$submodule: make done [3/4]" >&3
            echo "$passwd" | sudo -S make -j 4 install
            echo "$submodule: sudo make install done [4/4]" >&3
            ;;
        neovim)
            make -j 4 CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX="$install_dir"
            echo "$submodule: make finished [1/2]" >&3
            echo "$passwd" | sudo -S make -j 4 install
            echo "$submodule: sudo make install finished [2/2]" >&3
            ;;
        neovide)
	    cargo build --release
            echo "$submodule: cargo build --release finished [1/2]" >&3
            echo "$passwd" | sudo -S install target/release/neovide "${install_dir}/bin"
            echo "$submodule: sudo install to ${install_dir}/bin finished [2/2]" >&3
            ;;
        alacritty)
            cargo build --release
            echo "$submodule: cargo build --release finished [1/4]" >&3
            echo "$passwd" | sudo -S install target/release/alacritty "${install_dir}/bin"
            echo "$submodule: sudo install to ${install_dir}/bin finished [2/4]" >&3
            infocmp alacritty &> /dev/null || echo "$passwd" | sudo -S tic -o /usr/share/terminfo -xe alacritty,alacritty-direct extra/alcritty.info
            echo "$submodule: installing terminal info finishsed [3/4]" >&3
            build_alacritty_doc
            echo "$submodule: documentation built and installed [4/4]" >&3
            ;;
        dmenu|dwm|ii)
            echo "$passwd" | sudo -S make clean install
            echo "$submodule: sudo make clean install done [1/1]" >&3
            ;;
        gf2)
            ./build.sh
            echo "$submodule: running ./build.sh [1/2]" >&3
            echo "$passwd" | sudo -S install gf2 $install_dir
            echo "$submodule: installing gf2 to $install_dir [2/2]" >&3
            ;;
    esac
    git tag -f "installed"
    echo "$submodule: DONE tag created" >&3
    return 0
}

function build_alacritty_doc
{
    for manpage in "alacritty.1" "alacritty-msg.1" "alacritty.5" "alacritty-bindings.5"
    do
        pagenum=${manpage: -1}
        printf -v cmd 'scdoc < extra/man/%s.scd | gzip -c | sudo tee %s/share/man/man%s/%s.gz' "$manpage" "$install_dir" "$pagenum" "$manpage"
        eval "$cmd"
    done
}

function spinner
{
    trap 'echo -e "\x1b[?25h"; exit' SIGTERM
    local spinner=("/" "-" "\\" "|")
    let i=0
    echo -e "\x1b[?25l"
    while true
    do
        printf "%c\r" "${spinner[i]}"
        let i=(i+1)%4
        sleep .2
    done
}

function is_installed
{
    local submodule="$1"
    git -C "./$submodule" tag --points-at HEAD | grep "installed" &> /dev/null
}

# If the submodule does not have the 'installed' tag on its HEAD
# ask user if he wants to install or not
function prompt-installation
{
    local submodule="$1"
    read -p "Install/update ${submodule}? [y/n]: " ans
    if [[ "$ans" == y* ]]
    then
	install["$submodule"]=true
	# Name of the submodule/repo is the same as the executable usually
	# Except for 'Neovim' whose executable is 'nvim'
	test "$submodule" = "neovim" && local bin="nvim" || local bin="$submodule"
	test -x "${install_dir}/bin/${bin}" || pkgs+=${deps[$submodule]}' '
    fi
}

install_dir="/usr/local"
deps=""

echo "Some commands will require 'sudo' privelege, please enter your password"
read -s passwd
echo "$passwd" | sudo -S true || { echo "Password given is incorrect"; exit 1;}

# Open a new file descriptor to capture original stdout
# Stdout will be redirected to a log file for the forked installations
exec 3>&1

submodules=(git neovim neovide alacritty gf2 tmux ii dwm dmenu)
declare -A install

declare -A deps
deps[git]="libssl-dev libcurl4-gnutls-dev libexpat1-dev asciidoc"
deps[neovim]="ninja-build gettext cmake unzip curl"
deps[neovide]="gcc-multilib g++-multilib libssl-dev libfreetype6-dev libasound2-dev libexpat1-dev \
               libxcb-composite0-dev libbz2-dev libsndio-dev freeglut3-dev libxi-dev \
               libfontconfig1-dev libxcursor-dev"
deps[tmux]="libevent-dev libncurses-dev yacc"
deps[dwm]="libx11-dev libxinerama-dev libxft-dev"
deps[dmenu]="libx11-dev libxinerama-dev libxft-dev"
deps[alacritty]="libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev"


# List of packages required to compile a submodule
# We need to check if the first time compiling submodule
# and if it is, install those packages
pkgs=""

for submodule in "${submodules[@]}"
do
    is_installed "$submodule" || prompt-installation "$submodule"
done

if test "$pkgs"
then
    echo "installing dependencies: $pkgs"
    echo "$passwd" | sudo -S apt-get install $pkgs
fi

mkdir -p logs
declare pid
for submodule in ${submodules[@]}
do
    if test "${install[$submodule]}" = true
    then
        logfile="logs/${submodule}_logs"
        (
          cd "$submodule"
          install "$submodule"
          exit_code=$?
          clean "$submodule"
          exit "$exit_code"
        ) &>"$logfile" &
        pid[$!]="$submodule"
    fi
done

if (( ${#pid[@]} ))
then
    spinner &
    spinner_pid=$!
    echo "waiting on installation to finish..."
    trap 'kill $spinner_pid
          printf "Interrupted\nCleaning directories...\n"
          for submodule in ${submodules[@]}
          do
            test "${install[$submodule]}" = true && clean $submodule 3>/dev/null
          done;
          exit 1' SIGINT SIGTERM
    while test ${#pid[@]} -gt 0
    do
        if ! wait -n -p ended_pid ${!pid[@]}
        then
            submodule=${pid[ended_pid]}
            printf 'Encountered a problem during %s installation... Check logs at "./logs/%s_logs"\n' "$submodule" "$submodule"
        fi
        unset pid[ended_pid]
    done
    kill "$spinner_pid"
fi

# vim: fde=FoldBashFunction(v\:lnum)
